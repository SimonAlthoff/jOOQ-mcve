package org.jooq.mcve.test.java;

import io.r2dbc.pool.ConnectionPool;
import io.r2dbc.pool.ConnectionPoolConfiguration;
import io.r2dbc.spi.ConnectionFactories;
import io.r2dbc.spi.ConnectionFactory;
import io.r2dbc.spi.ConnectionFactoryOptions;
import org.jooq.DSLContext;
import org.jooq.Publisher;
import org.jooq.exception.DataAccessException;
import org.jooq.impl.DSL;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.util.concurrent.TimeoutException;

import static org.junit.Assert.assertEquals;

public class JavaTest {

    public ConnectionPool connectionPool;
    public DSLContext ctx;

    @Before
    public void setup() {

        final ConnectionFactory baseConnectionFactory = ConnectionFactories.get(
                ConnectionFactoryOptions
                        .parse("r2dbc:postgresql://127.0.0.1:5432/mcve13669")
                        .mutate()
                        .option(ConnectionFactoryOptions.USER, "postgres")
                        .option(ConnectionFactoryOptions.PASSWORD, "postgres")
                        .build());


        final ConnectionPoolConfiguration connectionPoolConfiguration = ConnectionPoolConfiguration
                .builder(baseConnectionFactory)
                .initialSize(1)
                .maxSize(1)
                .build();

        this.connectionPool = new ConnectionPool(connectionPoolConfiguration);

        ctx = DSL.using(connectionPool);
        Flux.from(ctx.delete(DSL.table("mcve.test"))).blockLast();
    }

    @After
    public void after() {
        ctx = null;
        connectionPool.close();
    }

    @Test
    public void mcveTest() {

        Publisher<Integer> values = ctx.insertInto(DSL.table("mcve.test"))
                .columns(DSL.field("id"))
                .values(1);

        //Insert first value
        Flux.from(values)
                .blockLast();

        //Generate key violation (test succeeds if commented out)
        Flux.from(values)
                .onErrorResume(DataAccessException.class, ign -> Mono.empty())
                .blockLast();

        //This never finishes without timeout
        Flux.from(ctx.select().from("mcve.test"))
                .timeout(Duration.ofSeconds(10))
                .onErrorResume(TimeoutException.class, ign -> Mono.empty())
                .blockLast();

        assertEquals(
                0,
                connectionPool.getMetrics().get().acquiredSize());
    }
}
